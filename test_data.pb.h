// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_data.proto

#ifndef PROTOBUF_test_5fdata_2eproto__INCLUDED
#define PROTOBUF_test_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sofa {
namespace pbrpc {
namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_5fdata_2eproto();
void protobuf_AssignDesc_test_5fdata_2eproto();
void protobuf_ShutdownFile_test_5fdata_2eproto();

class TestData;

// ===================================================================

class TestData : public ::google::protobuf::Message {
 public:
  TestData();
  virtual ~TestData();

  TestData(const TestData& from);

  inline TestData& operator=(const TestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestData& default_instance();

  void Swap(TestData* other);

  // implements Message ----------------------------------------------

  TestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestData& from);
  void MergeFrom(const TestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 v1 = 1;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 1;
  inline ::google::protobuf::int32 v1() const;
  inline void set_v1(::google::protobuf::int32 value);

  // optional int64 v2 = 2;
  inline bool has_v2() const;
  inline void clear_v2();
  static const int kV2FieldNumber = 2;
  inline ::google::protobuf::int64 v2() const;
  inline void set_v2(::google::protobuf::int64 value);

  // optional bool v3 = 3;
  inline bool has_v3() const;
  inline void clear_v3();
  static const int kV3FieldNumber = 3;
  inline bool v3() const;
  inline void set_v3(bool value);

  // optional bytes v4 = 4;
  inline bool has_v4() const;
  inline void clear_v4();
  static const int kV4FieldNumber = 4;
  inline const ::std::string& v4() const;
  inline void set_v4(const ::std::string& value);
  inline void set_v4(const char* value);
  inline void set_v4(const void* value, size_t size);
  inline ::std::string* mutable_v4();
  inline ::std::string* release_v4();
  inline void set_allocated_v4(::std::string* v4);

  // optional string v5 = 5;
  inline bool has_v5() const;
  inline void clear_v5();
  static const int kV5FieldNumber = 5;
  inline const ::std::string& v5() const;
  inline void set_v5(const ::std::string& value);
  inline void set_v5(const char* value);
  inline void set_v5(const char* value, size_t size);
  inline ::std::string* mutable_v5();
  inline ::std::string* release_v5();
  inline void set_allocated_v5(::std::string* v5);

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.test.TestData)
 private:
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_v2();
  inline void clear_has_v2();
  inline void set_has_v3();
  inline void clear_has_v3();
  inline void set_has_v4();
  inline void clear_has_v4();
  inline void set_has_v5();
  inline void clear_has_v5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 v2_;
  ::google::protobuf::int32 v1_;
  bool v3_;
  ::std::string* v4_;
  ::std::string* v5_;
  friend void  protobuf_AddDesc_test_5fdata_2eproto();
  friend void protobuf_AssignDesc_test_5fdata_2eproto();
  friend void protobuf_ShutdownFile_test_5fdata_2eproto();

  void InitAsDefaultInstance();
  static TestData* default_instance_;
};
// ===================================================================


// ===================================================================

// TestData

// required int32 v1 = 1;
inline bool TestData::has_v1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestData::set_has_v1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestData::clear_has_v1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestData::clear_v1() {
  v1_ = 0;
  clear_has_v1();
}
inline ::google::protobuf::int32 TestData::v1() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.test.TestData.v1)
  return v1_;
}
inline void TestData::set_v1(::google::protobuf::int32 value) {
  set_has_v1();
  v1_ = value;
  // @@protoc_insertion_point(field_set:sofa.pbrpc.test.TestData.v1)
}

// optional int64 v2 = 2;
inline bool TestData::has_v2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestData::set_has_v2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestData::clear_has_v2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestData::clear_v2() {
  v2_ = GOOGLE_LONGLONG(0);
  clear_has_v2();
}
inline ::google::protobuf::int64 TestData::v2() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.test.TestData.v2)
  return v2_;
}
inline void TestData::set_v2(::google::protobuf::int64 value) {
  set_has_v2();
  v2_ = value;
  // @@protoc_insertion_point(field_set:sofa.pbrpc.test.TestData.v2)
}

// optional bool v3 = 3;
inline bool TestData::has_v3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestData::set_has_v3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestData::clear_has_v3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestData::clear_v3() {
  v3_ = false;
  clear_has_v3();
}
inline bool TestData::v3() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.test.TestData.v3)
  return v3_;
}
inline void TestData::set_v3(bool value) {
  set_has_v3();
  v3_ = value;
  // @@protoc_insertion_point(field_set:sofa.pbrpc.test.TestData.v3)
}

// optional bytes v4 = 4;
inline bool TestData::has_v4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestData::set_has_v4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestData::clear_has_v4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestData::clear_v4() {
  if (v4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v4_->clear();
  }
  clear_has_v4();
}
inline const ::std::string& TestData::v4() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.test.TestData.v4)
  return *v4_;
}
inline void TestData::set_v4(const ::std::string& value) {
  set_has_v4();
  if (v4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v4_ = new ::std::string;
  }
  v4_->assign(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.test.TestData.v4)
}
inline void TestData::set_v4(const char* value) {
  set_has_v4();
  if (v4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v4_ = new ::std::string;
  }
  v4_->assign(value);
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.test.TestData.v4)
}
inline void TestData::set_v4(const void* value, size_t size) {
  set_has_v4();
  if (v4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v4_ = new ::std::string;
  }
  v4_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.test.TestData.v4)
}
inline ::std::string* TestData::mutable_v4() {
  set_has_v4();
  if (v4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v4_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.test.TestData.v4)
  return v4_;
}
inline ::std::string* TestData::release_v4() {
  clear_has_v4();
  if (v4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = v4_;
    v4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestData::set_allocated_v4(::std::string* v4) {
  if (v4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete v4_;
  }
  if (v4) {
    set_has_v4();
    v4_ = v4;
  } else {
    clear_has_v4();
    v4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.test.TestData.v4)
}

// optional string v5 = 5;
inline bool TestData::has_v5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestData::set_has_v5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestData::clear_has_v5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestData::clear_v5() {
  if (v5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v5_->clear();
  }
  clear_has_v5();
}
inline const ::std::string& TestData::v5() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.test.TestData.v5)
  return *v5_;
}
inline void TestData::set_v5(const ::std::string& value) {
  set_has_v5();
  if (v5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v5_ = new ::std::string;
  }
  v5_->assign(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.test.TestData.v5)
}
inline void TestData::set_v5(const char* value) {
  set_has_v5();
  if (v5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v5_ = new ::std::string;
  }
  v5_->assign(value);
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.test.TestData.v5)
}
inline void TestData::set_v5(const char* value, size_t size) {
  set_has_v5();
  if (v5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v5_ = new ::std::string;
  }
  v5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.test.TestData.v5)
}
inline ::std::string* TestData::mutable_v5() {
  set_has_v5();
  if (v5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    v5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.test.TestData.v5)
  return v5_;
}
inline ::std::string* TestData::release_v5() {
  clear_has_v5();
  if (v5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = v5_;
    v5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestData::set_allocated_v5(::std::string* v5) {
  if (v5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete v5_;
  }
  if (v5) {
    set_has_v5();
    v5_ = v5;
  } else {
    clear_has_v5();
    v5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.test.TestData.v5)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace pbrpc
}  // namespace sofa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_5fdata_2eproto__INCLUDED
